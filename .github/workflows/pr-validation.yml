name: PR Validation

on:
  pull_request:
    branches: [ master, main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'

jobs:
  # Schnelle Validierung für PRs
  quick-validation:
    name: Quick PR Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: TypeScript type checking
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm test

    - name: Build application
      run: npm run build

    - name: Comment PR status
      uses: actions/github-script@v7
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });

          const jobStatus = process.env.JOB_STATUS || 'completed';
          const conclusion = '${{ job.status }}';

          if (conclusion === 'success') {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **PR Validation Successful**\n\nAll checks passed! Your changes are ready for review.\n\n- ✅ Linting passed\n- ✅ TypeScript validation passed\n- ✅ Unit tests passed\n- ✅ Build successful`
            });
          } else if (conclusion === 'failure') {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **PR Validation Failed**\n\nPlease fix the following issues before merging:\n\n- Check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details\n- Ensure all tests pass\n- Fix any linting or TypeScript errors\n- Verify the build completes successfully`
            });
          }

  # Coverage Report für PRs
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Generate coverage report
      run: |
        echo "Coverage Summary:"
        cat coverage/lcov.info | grep -E "(^SF:|^LF:|^LH:)" | tail -3

        # Calculate coverage percentage
        LF=$(cat coverage/lcov.info | grep "^LF:" | cut -d: -f2)
        LH=$(cat coverage/lcov.info | grep "^LH:" | cut -d: -f2)
        if [ "$LF" -gt 0 ]; then
          COVERAGE=$((LH * 100 / LF))
          echo "Coverage: $COVERAGE%"

          # Set coverage threshold (80%)
          if [ "$COVERAGE" -lt 80 ]; then
            echo "❌ Coverage below 80% threshold"
            exit 1
          else
            echo "✅ Coverage meets 80% threshold"
          fi
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: pr-validation

  # Final PR Status
  pr-status:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, coverage-report]
    if: always()

    steps:
    - name: PR Status Summary
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const quickValidation = '${{ needs.quick-validation.result }}';
          const coverageReport = '${{ needs.coverage-report.result }}';

          const allPassed = quickValidation === 'success' && (coverageReport === 'success' || coverageReport === 'skipped');

          if (allPassed) {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'success',
              description: 'All PR validations passed',
              context: 'PR Validation'
            });
          } else {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'failure',
              description: 'PR validations failed',
              context: 'PR Validation'
            });
          }